[
    {
        "id": "d37c0d33d99013c6",
        "type": "subflow",
        "name": "Notification",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 580,
                "wires": [
                    {
                        "id": "d3a95e4560d29aac"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#4A88C0",
        "icon": "font-awesome/fa-comment",
        "status": {
            "x": 2160,
            "y": 100,
            "wires": [
                {
                    "id": "05619cd69558e775",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ae87ffd25e9cd3b0",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "Telegram",
        "style": {
            "stroke": "#000000",
            "fill": "#7f8faf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "173d4f04beeb84da",
            "7fe19a6ebf669a7d",
            "c0d566657388ab2a",
            "ac83247143aaa79b",
            "590e4c6573f9bc59",
            "cb7876ea460b105a",
            "b266f27bb45bd72b",
            "415c4f41a73be317",
            "a64d433f5b21f1b4",
            "638c5b2ccb04b9cc",
            "83209834b079ecd9"
        ],
        "x": 1294,
        "y": 919,
        "w": 872,
        "h": 362
    },
    {
        "id": "3723944e52437383",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "TTS",
        "style": {
            "stroke": "#000000",
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0a3f80c5a104cea6",
            "371bc920d7c02558",
            "e40433584d22f707",
            "d26f34de7d782d78",
            "6fed6ed9102976f2",
            "185c01d9a8420fbe",
            "c29950d5d6bbe380",
            "b4e022117523905e",
            "84d0f2933aae945a",
            "9f095dfa99f0027b",
            "a8dde3ef98ef2162",
            "420b07fed09c3241",
            "ee345b12135868f0",
            "b48bc09372740241",
            "0d8ad26a693f9222",
            "692c4115ee79c566",
            "f93ac4d5ef391e4b"
        ],
        "x": 1294,
        "y": 179,
        "w": 2572,
        "h": 122
    },
    {
        "id": "3f12f7dfcb5c7f40",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "SMS",
        "style": {
            "stroke": "#000000",
            "fill": "#6f2fa0",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e62922d05357197a",
            "f17f05154119affb",
            "d3901c18ac0bf9b8"
        ],
        "x": 1294,
        "y": 1309,
        "w": 552,
        "h": 82
    },
    {
        "id": "9636cd574c04a5fa",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "E-Mail",
        "style": {
            "stroke": "#000000",
            "fill": "#ffcf3f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "be2e877be1844f05",
            "4284c473b0ee22fe",
            "d1607f5057184570",
            "f27feee1bed2108c"
        ],
        "x": 1294,
        "y": 459,
        "w": 1032,
        "h": 82
    },
    {
        "id": "109dfab8a46368d1",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "HTML5",
        "style": {
            "stroke": "#000000",
            "fill": "#3f93cf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4a83ce0a96c6a5f7",
            "101f0126c8c878d5",
            "be1bbea6bf3d42ed",
            "05619cd69558e775"
        ],
        "x": 1294,
        "y": 59,
        "w": 812,
        "h": 82
    },
    {
        "id": "6e8c58c7b970fef2",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "Mattermost",
        "style": {
            "stroke": "#000000",
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "be48507a4c85f8c8",
            "170251cb68522182",
            "90a2d0991cb7f055",
            "66128b8eaf425a63",
            "0b1fb84613cd8c84",
            "f047234e72f5e847",
            "336d65f4487fe26d",
            "9e69575b8c717131",
            "203c03dbc7a29204",
            "b7f0b182222f387c"
        ],
        "x": 1294,
        "y": 739,
        "w": 1532,
        "h": 162
    },
    {
        "id": "b320a76202a15be4",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "Awtrix",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#ff7f7f",
            "color": "#000000"
        },
        "nodes": [
            "b786f8be85ca161f",
            "849f6c694d844931",
            "86851be5233ceb32"
        ],
        "x": 1294,
        "y": 1419,
        "w": 552,
        "h": 82
    },
    {
        "id": "03114f258232250f",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "Discord",
        "style": {
            "stroke": "#000000",
            "fill": "#b797cf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5c920f3750f2b506",
            "4d89bc43b7e15233",
            "c88c9092e10df86e",
            "7e44abab9b51763f",
            "e2f8d2c29c3fac46",
            "16322f181306e08e",
            "827db2d7a25f0a2d",
            "b6197462ef40847b",
            "acf60e8cbdbe191d",
            "85a509fd6b70cb4e"
        ],
        "x": 1294,
        "y": 559,
        "w": 1512,
        "h": 162
    },
    {
        "id": "824f955238e88efc",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "Home Assistant",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "db6dd1c33377c912",
            "07e360d06a3f89df",
            "36b1bcfcaef49574",
            "1d62ad721aa31cb7",
            "34dba90d638edb56"
        ],
        "x": 1294,
        "y": 339,
        "w": 1032,
        "h": 82
    },
    {
        "id": "5997e3e14331eedd",
        "type": "group",
        "z": "d37c0d33d99013c6",
        "name": "CallMeBot",
        "style": {
            "stroke": "#000000",
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c209b185326fa55d",
            "c84070fdde40580e",
            "4b869e8725b611ba"
        ],
        "env": [],
        "x": 1294,
        "y": 1539,
        "w": 612,
        "h": 82
    },
    {
        "id": "b45bfdf42c36c673",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "name": "Redirect to dest",
        "property": "dest",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "html5",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "tts_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "tel_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mail_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "discord_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "mattermost_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "telegram_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "sms_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "awtrix_",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "callmebot_",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "101f0126c8c878d5"
            ],
            [
                "c29950d5d6bbe380"
            ],
            [
                "07e360d06a3f89df"
            ],
            [
                "4284c473b0ee22fe"
            ],
            [
                "4d89bc43b7e15233"
            ],
            [
                "170251cb68522182"
            ],
            [
                "173d4f04beeb84da"
            ],
            [
                "d3901c18ac0bf9b8"
            ],
            [
                "86851be5233ceb32"
            ],
            [
                "c209b185326fa55d"
            ]
        ],
        "outputLabels": [
            "",
            "",
            "mobile_clement",
            "email",
            "discord",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "id": "4a83ce0a96c6a5f7",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "109dfab8a46368d1",
        "name": "html5",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "html5",
        "entityId": "",
        "data": "{\"message\":\"{{message}}\"}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1830,
        "y": 100,
        "wires": [
            [
                "05619cd69558e775"
            ]
        ]
    },
    {
        "id": "101f0126c8c878d5",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "109dfab8a46368d1",
        "name": "Check Short Message",
        "func": "if (msg.short_message !== 'undefined' ) {\n    msg.short_message = msg.message;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 100,
        "wires": [
            [
                "be1bbea6bf3d42ed"
            ]
        ]
    },
    {
        "id": "db6dd1c33377c912",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "824f955238e88efc",
        "name": "Get Configuration",
        "func": "dest = msg.dest ;\nconfig = global.get(\"notif.home_assistant.dest.\"+dest) || 'undefined'\nmsg.entity_id = config;\n\nask = []\nmsg.payload = {};\nmsg.payload.data = {}\nif (msg.ask != undefined) {\n    for(let key in msg.ask.data) {\n        uri = msg.ask.data[key];\n        ask.push({\n            action: msg.ask.action,\n            title: key,\n            uri: ''+uri+'',            \n        })\n    }\n\n    msg.payload.data.data = {\n        actions: ask\n    };\n}\n\nmsg.payload.data.message = msg.message;\n\n\nif(msg.title != undefined) {\n    msg.payload.data.title = msg.title;    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 380,
        "wires": [
            [
                "36b1bcfcaef49574"
            ]
        ]
    },
    {
        "id": "07e360d06a3f89df",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "824f955238e88efc",
        "name": "Check Short Message",
        "func": "if (msg.short_message !== 'undefined' ) {\n    msg.short_message = msg.message;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 380,
        "wires": [
            [
                "1d62ad721aa31cb7"
            ]
        ]
    },
    {
        "id": "36b1bcfcaef49574",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "824f955238e88efc",
        "name": "Home Assistant ",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": true,
        "service_domain": "notify",
        "service": "{{ entity_id }}",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2080,
        "y": 380,
        "wires": [
            [
                "34dba90d638edb56"
            ]
        ]
    },
    {
        "id": "be2e877be1844f05",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "9636cd574c04a5fa",
        "name": "Get Configuration",
        "func": "dest = msg.dest ;\nconfig = global.get(\"notif.email.dest.\"+dest) || 'undefined'\nmsg.to = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1710,
        "y": 500,
        "wires": [
            [
                "d1607f5057184570",
                "f27feee1bed2108c"
            ]
        ]
    },
    {
        "id": "4284c473b0ee22fe",
        "type": "change",
        "z": "d37c0d33d99013c6",
        "g": "9636cd574c04a5fa",
        "name": "Message2Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 500,
        "wires": [
            [
                "be2e877be1844f05"
            ]
        ]
    },
    {
        "id": "d1607f5057184570",
        "type": "e-mail",
        "z": "d37c0d33d99013c6",
        "g": "9636cd574c04a5fa",
        "server": "smtp.eu.mailgun.org",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1970,
        "y": 500,
        "wires": []
    },
    {
        "id": "d7f982b15eaac422",
        "type": "comment",
        "z": "d37c0d33d99013c6",
        "name": "========== DOCUMENTATION EN ==========",
        "info": "# Information\n\nThis flow aims to centralize all notifications.\n\nActualy, it's work with :\n- HTML5 (by Home Assistant)\n- Discord\n- Telegram\n- Email\n- TTS\n- Home Assistant (Mobile App)\n- SMS by HTTP\n- Appel Telegram (by CallMeBot)\n- Signal (by CallMeBot)\n- WhatsApp (by CallMeBot)\n- Facebook Messenger (by CallMeBot)\n\n# Requirements\n\n- node-red-contrib-chatbot\n- node-red-contrib-chatbot-discord\n- node-red-contrib-string\n- node-red-contrib-home-assistant-websocket\n- node-red-node-email\n\n\n# Input\n\nIn this example, you can find all inut :\n\n```\nmsg.title = \"Home Assistant - New version available\"\nmsg.dest = \"tel_clement;mail_clement;tts_80_hall\"  \nmsg.message = \"Home Assistant : New version available => 0.113.0 \\n\nhttps://github.com/home-assistant/core/releases/tag/0.113.0\"\nmsg.short_message = \"Home Assistant : New version available (0.113.0)\"\nmsg.image = \"/data/image.jpeg\"\nmsg.document = \"/data/doc.js\"\nmsg.video = \"/data/video.mp4\"\n```\n> All inputs are not necessarily compatible with all services\n\n\n## Title / `msg.title`\n\n_Available on : Email_\n\nTitle use only for email\n\n_Example:_\n\n```\nmsg.title = \"Home Assistant - New version available\"\n```\n\n## Message / `msg.message`\n\n_Available on : Email / Telegram / Discord / CallMeBot_\n\nLong version of message\n\n_Example:_\n\n```\nmsg.message = \"Home Assistant : New version available => 0.113.0 \\n https://github.com/home-assistant/core/releases/tag/0.113.0\"\n```\n\n## Short Message / `msg.short_message`\n_Available on : HTML5 / Home Assistant_\n\nShort Message use in \"popup'\n\n_Example:_\n```\nmsg.short_message = \"Home Assistant : New version available (0.113.0)\"\n```\n\n**WARNING : Message are Trim & `\\n` replace by space**\n> => If not set, i take msg.message.\n  \n## Message repetition/ `msg.repeat`\n\n_Available on : Telegram Voice (CallMeBot)_\n\nRepeat audio message X times.\n\n_Example:_\n```\nmsg.repeat = 2\n```\n\n## Image / `msg.image`\n_Available on : Telegram / CallMeBotMessenger_\n\n_Example:_\n```\nmsg.image = \"/data/image.jpeg\"\nmsg.image = \"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg\"\n```\n## Document / `msg.document`\n_Available on : Telegram_\n_Example:_\n```\nmsg.document = \"/data/doc.js\"\n```\n## Video / `msg.video`\n_Available on : Telegram_\n_Example:_\n```\nmsg.video = \"/data/video.mp4\"\n```\n\n## Destination / `msg.dest`\n\n_Available on : All_\n\nIs a string to contains all destination separated by \"`;`\"\n\n_Example:_\n\n```\nmsg.dest = \"tel_clement;mail_clement;tts_80_hall\"  \n```\n\nMessage send to :\n- tel_clement \n- mail_clement\n- tts_80_hall       \n\n### HTML5\nThis dest is always notify, you don't need to add this dest.\n\n### Discord \nDest must start by `discord_`\n\n_Example:_\n```\nmsg.dest = \"discord_communaute_news;discord_maison_information;discord_maison_network\"  \n```\n\n### Home Assistant \nDest must start by `tel_`\n\n_Example:_\n```\nmsg.dest = \"tel_clement;tel_papa;tel_maman\n```\n### Email \nDest must start by `mail_`\n\n_Example:_\n```\nmsg.dest = \"mail_clement;mail_thomas\"\n```\n### Telegram\nDest must start by `telegram_`\n\n_Example:_\n```\nmsg.dest = \"telegram_smarthome;telegram_familly\"\n```\n### TTS\nDest must start by `tts_`\n\nFormat : `tts_{VOLUME}_{ENTITY_ID_OF_MEDIA_PLAYER}`\n\n_Example:_\n```\nmsg.dest = \"tts_80_hall\"\n```\n\n### SMS\nDest must start by `sms_`\n\n_Example:_\n```\nmsg.dest = \"sms_clement\"\n```\n### Telegram Voice (CallMeBot)\nDest must start by `callmebot_telegram_voice_`\n\n_Example:_\n```\nmsg.dest = \"callmebot_telegram_voice_clement\"\n```\n### FacebookMessenger (CallMeBot)\nDest must start by `callmebot_messenger_`\n\n_Example:_\n```\nmsg.dest = \"callmebot_messenger_clement\"\n```\n### Signal (CallMeBot)\nDest must start by `callmebot_signal_`\n\n_Example:_\n```\nmsg.dest = \"callmebot_signal_clement\"\n```\n### Whatsapp (CallMeBot)\nDest must start by `callmebot_whatsapp_`\n\n_Example:_\n```\nmsg.dest = \"callmebot_whatsapp_clement\"\n```\n\n# Configuration\nSubflow get configuration in global variable `notif.`\n> TTS no need configuration\n\n_Example:_\n\n```\nvar configuration = \n{\n    \"discord\": {\n        \"dest\": {\n            \"discord_communaute_news\": \"https://discord.com/api/webhooks/XXXXXXXXXXXXXXXX\",\n            \"discord_communaute_zwave\": \"https://discord.com/api/webhooks/YYYYYYYYYYYYYYYY\",\n            \"discord_communaute_diy\": \"https://discord.com/api/webhooks/ZZZZZZZZZZZZZZZZZ\",\n        }\n    },\n    \"home_assistant\": {\n        \"dest\": {\n            \"tel_clement\": \"mobile_app_oneplus_a6010\",\n            \"tel_nathalie\": \"mobile_app_oneplus_a5000\"\n        }\n    },\n    \"email\": {\n        \"dest\": {\n            \"mail_clement\": \"email1@domain.fr\",\n            \"mail_john\": \"email2@domain.fr\",\n            \"mail_bibi\": \"email3@domain.fr\"        \n        }\n    },\n    \"telegram\": {\n        \"dest\": {\n            \"telegram_smarthome\": \"ID1\",\n            \"telegram_bot\": \"ID2\"        \n        }\n    },\n    \"mattermost\": {\n        \"dest\": {\n            \"mattermost_home\" : \"https://mattermost.domain.fr/hooks/XXXXXXXXXXXXXXXXXXXXXXXXX\",\n            \"mattermost_volets\" : \"https://mattermost.domain.fr/hooks/YYYYYYYYYYYYYYYYYYYYYYYY\",\n        }\n    },\n    \"sms\": {\n        \"url\": \"http://192.168.1.1:8080/?action=sendSms&number=##SMSNUMBER##&message=##MESSAGE##\",\n        \"dest\": {\n            \"sms_clement\": \"06XXXXXXXXX\",\n            \"sms_nathalie\": \"06YYYYYYYYY\",\n        }\n    },\n    \"callmebot\": {\n        \"dest\": {\n            \"callmebot_messenger_clement\" : \"https://api.callmebot.com/facebook/send.php?apikey=##APIKEY##\",\n            \"callmebot_signal_clement\" : \"https://api.callmebot.com/signal/send.php?phone=##PHONENUMBER##&apikey=##APIKEY##\",\n            \"callmebot_telegram_voice_clement\" : \"http://api.callmebot.com/start.php?user=##USERNAME##&lang=##LANGUAGE##\",\n            \"callmebot_whatsapp_clement\" : \"https://api.callmebot.com/whatsapp.php?phone=##PHONENUMBER##&apikey=##APIKEY##\"\n        }\n    }\n}\nglobal.set(\"notif\",configuration)\n\nreturn msg;\n```\n\nYou can take this flow to help you to configure sublow :) \n\n\n```\n[\n    {\n        \"id\": \"bbda9cf1.ad8ba\",\n        \"type\": \"inject\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": true,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 290,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"513d2c9.069c3d4\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"dacca689.055138\",\n        \"type\": \"function\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"Configurateur EXEMPLE\",\n        \"func\": \"var configuration = \\n{\\n    \\\"discord\\\": {\\n        \\\"dest\\\": {\\n            \\\"discord_communaute_news\\\": \\\"https://discord.com/api/webhooks/XXXXXXXXXXXXXXXX\\\",\\n            \\\"discord_communaute_zwave\\\": \\\"https://discord.com/api/webhooks/YYYYYYYYYYYYYYYY\\\",\\n            \\\"discord_communaute_diy\\\": \\\"https://discord.com/api/webhooks/ZZZZZZZZZZZZZZZZZ\\\",\\n        }\\n    },\\n    \\\"home_assistant\\\": {\\n        \\\"dest\\\": {\\n            \\\"tel_clement\\\": \\\"mobile_app_oneplus_a6010\\\",\\n            \\\"tel_nathalie\\\": \\\"mobile_app_oneplus_a5000\\\"\\n        }\\n    },\\n    \\\"email\\\": {\\n        \\\"dest\\\": {\\n            \\\"mail_clement\\\": \\\"email1@domain.fr\\\",\\n            \\\"mail_john\\\": \\\"email2@domain.fr\\\",\\n            \\\"mail_bibi\\\": \\\"email3@domain.fr\\\"        \\n        }\\n    },\\n    \\\"telegram\\\": {\\n        \\\"dest\\\": {\\n            \\\"telegram_smarthome\\\": \\\"ID1\\\",\\n            \\\"telegram_bot\\\": \\\"ID2\\\"        \\n        }\\n    },\\n    \\\"mattermost\\\": {\\n        \\\"dest\\\": {\\n            \\\"mattermost_home\\\" : \\\"https://mattermost.domain.fr/hooks/XXXXXXXXXXXXXXXXXXXXXXXXX\\\",\\n            \\\"mattermost_volets\\\" : \\\"https://mattermost.domain.fr/hooks/YYYYYYYYYYYYYYYYYYYYYYYY\\\",\\n        }\\n    },\\n    \\\"sms\\\": {\\n        \\\"url\\\": \\\"http://192.168.1.1:8080/?action=sendSms&number=##SMSNUMBER##&message=##MESSAGE##\\\",\\n        \\\"dest\\\": {\\n            \\\"sms_clement\\\": \\\"06XXXXXXXXX\\\",\\n            \\\"sms_nathalie\\\": \\\"06YYYYYYYYY\\\",\\n        }\\n    }\\n}\\nglobal.set(\\\"notif\\\",configuration)\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"x\": 700,\n        \"y\": 260,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"513d2c9.069c3d4\",\n        \"type\": \"change\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"Remove old config\",\n        \"rules\": [\n            {\n                \"t\": \"delete\",\n                \"p\": \"notif\",\n                \"pt\": \"global\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 470,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"dacca689.055138\"\n            ]\n        ]\n    }\n]\n```\n\nExemple of input :\n\n```\n[{\"id\":\"66da3fb7.1e4ff\",\"type\":\"change\",\"z\":\"8a8a63c5.0c3c2\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"title\",\"pt\":\"msg\",\"to\":\"Coucou\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"message\",\"pt\":\"msg\",\"to\":\"Long Message\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"short_message\",\"pt\":\"msg\",\"to\":\"Short Message\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"dest\",\"pt\":\"msg\",\"to\":\"tel_clement;mail_clement\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":740,\"y\":1880,\"wires\":[[\"7300bcc2.c97c34\"]]}]\n```",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "2d1ed5b2f28731c6",
        "type": "split",
        "z": "d37c0d33d99013c6",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "b605757d45f6514b"
            ]
        ]
    },
    {
        "id": "d3a95e4560d29aac",
        "type": "change",
        "z": "d37c0d33d99013c6",
        "name": "Convert dest2payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "dest",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 580,
        "wires": [
            [
                "2d1ed5b2f28731c6"
            ]
        ]
    },
    {
        "id": "b605757d45f6514b",
        "type": "delay",
        "z": "d37c0d33d99013c6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 630,
        "y": 580,
        "wires": [
            [
                "e1c13804fdcdfb85"
            ]
        ]
    },
    {
        "id": "e1c13804fdcdfb85",
        "type": "change",
        "z": "d37c0d33d99013c6",
        "name": "Convert payload2dest",
        "rules": [
            {
                "t": "set",
                "p": "dest",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 580,
        "wires": [
            [
                "b45bfdf42c36c673"
            ]
        ]
    },
    {
        "id": "95c0c463630314a5",
        "type": "comment",
        "z": "d37c0d33d99013c6",
        "name": "========== DOCUMENTATION FR ==========",
        "info": "# Information\n\nCe subflow va vous permettre de notifier plusieurs services en même temps.\n\nActuellement il gére les services :\n- HTML5 (by Home Assistant)\n- Discord\n- Telegram\n- Email\n- TTS\n- Home Assistant (Mobile App)\n- SMS via HTTP\n- Appel Telegram (avec CallMeBot)\n- Signal (avec CallMeBot)\n- WhatsApp (avec CallMeBot)\n- Facebook Messenger (avec CallMeBot)\n\n# Pré-requis\n\n- node-red-contrib-chatbot\n- node-red-contrib-chatbot-discord\n- node-red-contrib-string\n- node-red-contrib-home-assistant-websocket\n- node-red-node-email\n\n\n# Entrée\n\nVoici la liste des inputs actuellement possible :\n\n```\nmsg.title = \"Home Assistant - New version available\"\nmsg.dest = \"tel_clement;mail_clement;tts_80_hall\"  \nmsg.message = \"Home Assistant : New version available => 0.113.0 \\n\nhttps://github.com/home-assistant/core/releases/tag/0.113.0\"\nmsg.short_message = \"Home Assistant : New version available (0.113.0)\"\nmsg.image = \"/data/image.jpeg\"\nmsg.document = \"/data/doc.js\"\nmsg.video = \"/data/video.mp4\"\n```\n> Tout les inputs ne sont pas forcement compatible avec les differents services.\n\n## Titre / `msg.title`\n\n_Disponible sur : Email_\n\nTitre du mail.\n\n_Exemple:_\n\n```\nmsg.title = \"Home Assistant - New version available\"\n```\n\n## Message / `msg.message`\n\n_Disponible sur : Email / Telegram / Discord / CallMeBot_\n\nVersion longue du message.\n\n_Exemple:_\n\n```\nmsg.message = \"Home Assistant : New version available => 0.113.0 \\n https://github.com/home-assistant/core/releases/tag/0.113.0\"\n```\n\n## Message court / `msg.short_message`\n\n_Disponible sur : HTML5 / Home Assistant_\n\nMessage reduit pour les services type \"popup\".\n\n_Exemple:_\n```\nmsg.short_message = \"Home Assistant : New version available (0.113.0)\"\n```\n\n**ATTENTION : Les messages est `trim` et les `\\n` sont remplacer par des espace**\n> => Si il n'est pas défini, je reprend les `msg.message`\n\n## Répétition du message / `msg.repeat`\n\n_Disponible sur : Telegram Voice (CallMeBot)_\n\nRépète le message audio X fois.\n\n_Exemple:_\n```\nmsg.repeat = 2\n```\n\n## Image / `msg.image`\n\n_Disponible sur : Telegram / CallMeBot Messenger_\n\n_Exemple:_\n```\nmsg.image = \"/data/image.jpeg\"\nmsg.image = \"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg\"\n```\n## Document / `msg.document`\n\n_Disponible sur : Telegram_\n\n_Exemple:_\n```\nmsg.document = \"/data/doc.js\"\n```\n## Video / `msg.video`\n\n_Disponible sur : Telegram_\n\n_Exemple:_\n```\nmsg.video = \"/data/video.mp4\"\n```\n\n## Destinatation / `msg.dest`\nUn string qui contient la liste des services que vous désirez notifier séparer par des \"`;`\"\n\n_Exemple:_\n\n```\nmsg.dest = \"tel_clement;mail_clement;tts_80_hall\"  \n```\n\nLe message sera envoyé à :\n- tel_clement \n- mail_clement\n- tts_80_hall       \n\n### HTML5\nLa totalité des messages passe par ce système par défaut, pas besoin de l'ajouter en destination.\n\n### Discord \ndest doit commencer par `discord_`\n\n_Exemple:_\n```\nmsg.dest = \"discord_communaute_news;discord_maison_information;discord_maison_network\"  \n```\n\n### Home Assistant \ndest doit commencer par `tel_`\n\n_Exemple:_\n```\nmsg.dest = \"tel_clement;tel_papa;tel_maman\n```\n### Email \ndest doit commencer par `mail_`\n\n_Exemple:_\n```\nmsg.dest = \"mail_clement;mail_thomas\"\n```\n### Telegram\ndest doit commencer par `telegram_`\n\n_Exemple:_\n```\nmsg.dest = \"telegram_smarthome;telegram_familly\"\n```\n### TTS\ndest doit commencer par `tts_`\n\nFormat : `tts_{VOLUME}_{ENTITY_ID_DU_MEDIA_PLAYER}`\n\n_Exemple:_\n```\nmsg.dest = \"tts_80_hall\"\n```\n### SMS\ndest doit commencer par `sms_`\n\n_Exemple:_\n```\nmsg.dest = \"sms_clement\"\n```\n### Telegram Voice (CallMeBot)\ndest doit commencer par `callmebot_telegram_voice_`\n\n_Exemple:_\n```\nmsg.dest = \"callmebot_telegram_voice_clement\"\n```\n### FacebookMessenger (CallMeBot)\ndest doit commencer par `callmebot_messenger_`\n\n_Exemple:_\n```\nmsg.dest = \"callmebot_messenger_clement\"\n```\n### Signal (CallMeBot)\ndest doit commencer par `callmebot_signal_`\n\n_Exemple:_\n```\nmsg.dest = \"callmebot_signal_clement\"\n```\n### Whatsapp (CallMeBot)\ndest doit commencer par `callmebot_whatsapp_`\n\n_Exemple:_\n```\nmsg.dest = \"callmebot_whatsapp_clement\"\n```\n\n# Configuration\n\nLe subflow récupére sa configuration via la variable Global `notif.`\n\n> TTS n'a besoin d'aucune configuration particulière\n\n_Exemple:_\n\n```\nvar configuration = \n{\n    \"discord\": {\n        \"dest\": {\n            \"discord_communaute_news\": \"https://discord.com/api/webhooks/XXXXXXXXXXXXXXXX\",\n            \"discord_communaute_zwave\": \"https://discord.com/api/webhooks/YYYYYYYYYYYYYYYY\",\n            \"discord_communaute_diy\": \"https://discord.com/api/webhooks/ZZZZZZZZZZZZZZZZZ\",\n        }\n    },\n    \"home_assistant\": {\n        \"dest\": {\n            \"tel_clement\": \"mobile_app_oneplus_a6010\",\n            \"tel_nathalie\": \"mobile_app_oneplus_a5000\"\n        }\n    },\n    \"email\": {\n        \"dest\": {\n            \"mail_clement\": \"email1@domain.fr\",\n            \"mail_john\": \"email2@domain.fr\",\n            \"mail_bibi\": \"email3@domain.fr\"        \n        }\n    },\n    \"telegram\": {\n        \"dest\": {\n            \"telegram_smarthome\": \"ID1\",\n            \"telegram_bot\": \"ID2\"        \n        }\n    },\n    \"mattermost\": {\n        \"dest\": {\n            \"mattermost_home\" : \"https://mattermost.domain.fr/hooks/XXXXXXXXXXXXXXXXXXXXXXXXX\",\n            \"mattermost_volets\" : \"https://mattermost.domain.fr/hooks/YYYYYYYYYYYYYYYYYYYYYYYY\",\n        }\n    },\n    \"sms\": {\n        \"url\": \"http://192.168.1.1:8080/?action=sendSms&number=##SMSNUMBER##&message=##MESSAGE##\",\n        \"dest\": {\n            \"sms_clement\": \"06XXXXXXXXX\",\n            \"sms_nathalie\": \"06YYYYYYYYY\",\n        }\n    },\n    \"callmebot\": {\n        \"dest\": {\n            \"callmebot_messenger_clement\" : \"https://api.callmebot.com/facebook/send.php?apikey=##APIKEY##\",\n            \"callmebot_signal_clement\" : \"https://api.callmebot.com/signal/send.php?phone=##PHONENUMBER##&apikey=##APIKEY##\",\n            \"callmebot_telegram_voice_clement\" : \"http://api.callmebot.com/start.php?user=##USERNAME##&lang=##LANGUAGE##\",\n            \"callmebot_whatsapp_clement\" : \"https://api.callmebot.com/whatsapp.php?phone=##PHONENUMBER##&apikey=##APIKEY##\"\n        }\n    }\n}\nglobal.set(\"notif\",configuration)\n\nreturn msg;\n```\n\nPour vous aidez dans la configuration voici une function qui va vous permettres de pousser votre configuration à chaque deploiement.\n\nTout ce passe dans le node `Function`.\n\n\n```\n[\n    {\n        \"id\": \"bbda9cf1.ad8ba\",\n        \"type\": \"inject\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"\",\n        \"props\": [\n            {\n                \"p\": \"payload\"\n            }\n        ],\n        \"repeat\": \"\",\n        \"crontab\": \"\",\n        \"once\": true,\n        \"onceDelay\": 0.1,\n        \"topic\": \"\",\n        \"payload\": \"\",\n        \"payloadType\": \"date\",\n        \"x\": 290,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"513d2c9.069c3d4\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"dacca689.055138\",\n        \"type\": \"function\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"Configurateur EXEMPLE\",\n        \"func\": \"var configuration = \\n{\\n    \\\"discord\\\": {\\n        \\\"dest\\\": {\\n            \\\"discord_communaute_news\\\": \\\"https://discord.com/api/webhooks/XXXXXXXXXXXXXXXX\\\",\\n            \\\"discord_communaute_zwave\\\": \\\"https://discord.com/api/webhooks/YYYYYYYYYYYYYYYY\\\",\\n            \\\"discord_communaute_diy\\\": \\\"https://discord.com/api/webhooks/ZZZZZZZZZZZZZZZZZ\\\",\\n        }\\n    },\\n    \\\"home_assistant\\\": {\\n        \\\"dest\\\": {\\n            \\\"tel_clement\\\": \\\"mobile_app_oneplus_a6010\\\",\\n            \\\"tel_nathalie\\\": \\\"mobile_app_oneplus_a5000\\\"\\n        }\\n    },\\n    \\\"email\\\": {\\n        \\\"dest\\\": {\\n            \\\"mail_clement\\\": \\\"email1@domain.fr\\\",\\n            \\\"mail_john\\\": \\\"email2@domain.fr\\\",\\n            \\\"mail_bibi\\\": \\\"email3@domain.fr\\\"        \\n        }\\n    },\\n    \\\"telegram\\\": {\\n        \\\"dest\\\": {\\n            \\\"telegram_smarthome\\\": \\\"ID1\\\",\\n            \\\"telegram_bot\\\": \\\"ID2\\\"        \\n        }\\n    },\\n    \\\"mattermost\\\": {\\n        \\\"dest\\\": {\\n            \\\"mattermost_home\\\" : \\\"https://mattermost.domain.fr/hooks/XXXXXXXXXXXXXXXXXXXXXXXXX\\\",\\n            \\\"mattermost_volets\\\" : \\\"https://mattermost.domain.fr/hooks/YYYYYYYYYYYYYYYYYYYYYYYY\\\",\\n        }\\n    },\\n    \\\"sms\\\": {\\n        \\\"url\\\": \\\"http://192.168.1.1:8080/?action=sendSms&number=##SMSNUMBER##&message=##MESSAGE##\\\",\\n        \\\"dest\\\": {\\n            \\\"sms_clement\\\": \\\"06XXXXXXXXX\\\",\\n            \\\"sms_nathalie\\\": \\\"06YYYYYYYYY\\\",\\n        }\\n    }\\n}\\nglobal.set(\\\"notif\\\",configuration)\\n\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"x\": 700,\n        \"y\": 260,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"513d2c9.069c3d4\",\n        \"type\": \"change\",\n        \"z\": \"a9ae8a01.8a5bd8\",\n        \"name\": \"Remove old config\",\n        \"rules\": [\n            {\n                \"t\": \"delete\",\n                \"p\": \"notif\",\n                \"pt\": \"global\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 470,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"dacca689.055138\"\n            ]\n        ]\n    }\n]\n```\n\nEt voici un exemple de flow d'input :\n\n```\n[{\"id\":\"66da3fb7.1e4ff\",\"type\":\"change\",\"z\":\"8a8a63c5.0c3c2\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"title\",\"pt\":\"msg\",\"to\":\"Coucou\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"message\",\"pt\":\"msg\",\"to\":\"Long Message\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"short_message\",\"pt\":\"msg\",\"to\":\"Short Message\",\"tot\":\"str\"},{\"t\":\"set\",\"p\":\"dest\",\"pt\":\"msg\",\"to\":\"tel_clement;mail_clement\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":740,\"y\":1880,\"wires\":[[\"7300bcc2.c97c34\"]]}]\n```",
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "0a3f80c5a104cea6",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Media Player : ON",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": false,
        "service_domain": "media_player",
        "service": "turn_on",
        "entityId": "media_player.{{dest}}",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2010,
        "y": 260,
        "wires": [
            [
                "e40433584d22f707"
            ]
        ]
    },
    {
        "id": "371bc920d7c02558",
        "type": "api-current-state",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Get Current Volume",
        "server": "7f33d7bb.9361a8",
        "version": 2,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "media_player.{{dest}}",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 2380,
        "y": 260,
        "wires": [
            [
                "6fed6ed9102976f2"
            ]
        ]
    },
    {
        "id": "e40433584d22f707",
        "type": "delay",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2200,
        "y": 260,
        "wires": [
            [
                "371bc920d7c02558"
            ]
        ]
    },
    {
        "id": "d26f34de7d782d78",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Set volume",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": true,
        "service_domain": "media_player",
        "service": "volume_set",
        "entityId": "media_player.{{dest}}",
        "data": "{\"entity_id\":\"media_player.{{ dest }}\",\"volume_level\":\"{{ volume }}\"}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2810,
        "y": 260,
        "wires": [
            [
                "b4e022117523905e"
            ]
        ]
    },
    {
        "id": "6fed6ed9102976f2",
        "type": "change",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Save Current Volume",
        "rules": [
            {
                "t": "set",
                "p": "current_volume",
                "pt": "msg",
                "to": "data.attributes.volume_level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2600,
        "y": 260,
        "wires": [
            [
                "d26f34de7d782d78"
            ]
        ]
    },
    {
        "id": "185c01d9a8420fbe",
        "type": "api-current-state",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Get State",
        "server": "7f33d7bb.9361a8",
        "version": 2,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "media_player.{{dest}}",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 1680,
        "y": 260,
        "wires": [
            [
                "0d8ad26a693f9222"
            ]
        ]
    },
    {
        "id": "c29950d5d6bbe380",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Split Message",
        "func": "dest = msg.dest.split('_');\nmsg.volume = dest[1]/100;\nmsg.dest = msg.dest.replace('tts_'+dest[1]+\"_\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1400,
        "y": 260,
        "wires": [
            [
                "692c4115ee79c566"
            ]
        ]
    },
    {
        "id": "b4e022117523905e",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Play TTS",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": false,
        "service_domain": "tts",
        "service": "google_translate_say",
        "entityId": "media_player.{{dest}}",
        "data": "{\"entity_id\":\"media_player.{{ dest }}\",\"message\":\"{{ message }}\",\"language\":\"fr\"}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2960,
        "y": 260,
        "wires": [
            [
                "9f095dfa99f0027b"
            ]
        ]
    },
    {
        "id": "84d0f2933aae945a",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Reset volume",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": true,
        "service_domain": "media_player",
        "service": "volume_set",
        "entityId": "media_player.{{dest}}",
        "data": "{\"entity_id\":\"media_player.{{ dest }}\",\"volume_level\":\"{{ current_volume }}\"}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 3440,
        "y": 260,
        "wires": [
            [
                "420b07fed09c3241"
            ]
        ]
    },
    {
        "id": "9f095dfa99f0027b",
        "type": "delay",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 3120,
        "y": 260,
        "wires": [
            [
                "a8dde3ef98ef2162"
            ]
        ]
    },
    {
        "id": "a8dde3ef98ef2162",
        "type": "api-current-state",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Get State",
        "server": "7f33d7bb.9361a8",
        "version": 2,
        "outputs": 2,
        "halt_if": "playing",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "media_player.{{dest}}",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 3260,
        "y": 260,
        "wires": [
            [
                "ee345b12135868f0"
            ],
            [
                "84d0f2933aae945a"
            ]
        ]
    },
    {
        "id": "420b07fed09c3241",
        "type": "api-call-service",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Media Player : OFF",
        "server": "7f33d7bb.9361a8",
        "version": 3,
        "debugenabled": false,
        "service_domain": "media_player",
        "service": "turn_off",
        "entityId": "media_player.{{dest}}",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 3630,
        "y": 260,
        "wires": [
            [
                "f93ac4d5ef391e4b"
            ]
        ]
    },
    {
        "id": "ee345b12135868f0",
        "type": "link out",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "OUT : Wait idle",
        "links": [],
        "x": 3440,
        "y": 220,
        "wires": [],
        "l": true
    },
    {
        "id": "b48bc09372740241",
        "type": "link in",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "IN : Wait idle",
        "links": [],
        "x": 2950,
        "y": 220,
        "wires": [
            [
                "9f095dfa99f0027b"
            ]
        ],
        "l": true
    },
    {
        "id": "0d8ad26a693f9222",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Check status",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1830,
        "y": 260,
        "wires": [
            [
                "0a3f80c5a104cea6"
            ],
            [
                "0a3f80c5a104cea6"
            ]
        ]
    },
    {
        "id": "be1bbea6bf3d42ed",
        "type": "string",
        "z": "d37c0d33d99013c6",
        "g": "109dfab8a46368d1",
        "name": "",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "str",
                        "value": "\\n"
                    },
                    {
                        "type": "str",
                        "value": " "
                    }
                ]
            },
            {
                "name": "trim",
                "params": []
            }
        ],
        "prop": "message",
        "propout": "message",
        "object": "msg",
        "objectout": "msg",
        "x": 1630,
        "y": 100,
        "wires": [
            [
                "4a83ce0a96c6a5f7"
            ]
        ]
    },
    {
        "id": "1d62ad721aa31cb7",
        "type": "string",
        "z": "d37c0d33d99013c6",
        "g": "824f955238e88efc",
        "name": "",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "str",
                        "value": "\\n"
                    },
                    {
                        "type": "str",
                        "value": " "
                    }
                ]
            },
            {
                "name": "trim",
                "params": []
            }
        ],
        "prop": "message",
        "propout": "message",
        "object": "msg",
        "objectout": "msg",
        "x": 1590,
        "y": 380,
        "wires": [
            [
                "db6dd1c33377c912"
            ]
        ]
    },
    {
        "id": "692c4115ee79c566",
        "type": "string",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "",
        "methods": [
            {
                "name": "replaceAll",
                "params": [
                    {
                        "type": "str",
                        "value": "\\n"
                    },
                    {
                        "type": "str",
                        "value": " "
                    }
                ]
            },
            {
                "name": "trim",
                "params": []
            }
        ],
        "prop": "message",
        "propout": "message",
        "object": "msg",
        "objectout": "msg",
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "185c01d9a8420fbe"
            ]
        ]
    },
    {
        "id": "05619cd69558e775",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "109dfab8a46368d1",
        "name": "Log",
        "func": "node.log(\"NOTIF / HTML5 => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2030,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "34dba90d638edb56",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "824f955238e88efc",
        "name": "Log",
        "func": "node.log(\"NOTIF / Home Assistant => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2250,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f27feee1bed2108c",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "9636cd574c04a5fa",
        "name": "Log",
        "func": "node.log(\"NOTIF / Email => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2250,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "f93ac4d5ef391e4b",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "3723944e52437383",
        "name": "Log",
        "func": "node.log(\"NOTIF / TTS => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3790,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "be48507a4c85f8c8",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Log",
        "func": "node.log(\"NOTIF / Mattermost => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "170251cb68522182",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Get Configuration",
        "func": "dest = msg.dest ;\nconfig = global.get(\"notif.mattermost.dest.\"+dest) || 'undefined'\n\nmsg.data = {};\nmsg.webhook = config;\nmsg.data.username = \"SmartHome\";\nmsg.data.icon_url = \"https://www.contextworld.com/documents/20126/237707/Smart+Home_M.Blue+Icon.png/c92f8c28-6f99-c685-d21a-85c7cf90b515?t=1544434686070\";\nmsg.data.text = msg.message;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 820,
        "wires": [
            [
                "0b1fb84613cd8c84"
            ]
        ]
    },
    {
        "id": "90a2d0991cb7f055",
        "type": "http request",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Post Request",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2060,
        "y": 820,
        "wires": [
            [
                "203c03dbc7a29204"
            ]
        ]
    },
    {
        "id": "66128b8eaf425a63",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Format Query",
        "func": "msg.url = msg.webhook\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/json';\nmsg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 820,
        "wires": [
            [
                "90a2d0991cb7f055"
            ]
        ]
    },
    {
        "id": "0b1fb84613cd8c84",
        "type": "json",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Convert Data to String",
        "property": "data",
        "action": "",
        "pretty": false,
        "x": 1630,
        "y": 820,
        "wires": [
            [
                "66128b8eaf425a63"
            ]
        ]
    },
    {
        "id": "5c920f3750f2b506",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Log",
        "func": "node.log(\"NOTIF / Discord => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "4d89bc43b7e15233",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Get Configuration",
        "func": "dest = msg.dest ;\nconfig = global.get(\"notif.discord.dest.\"+dest) || 'undefined'\nmsg.webhook = config;\n\n// MESSAGE\nusername = msg.username || \"undefined\";\ncontent = msg.message || \"undefined\";\navatar_url = msg.avatar_url || \"undefined\";\n\n// AUTHOR\nembeds_author_name = msg.embeds_author_name || \"undefined\";\nembeds_author_icon_url = msg.embeds_author_icon_url || \"undefined\";\nembeds_author_url = msg.embeds_author_url || \"undefined\";\n\nembeds_title = msg.embeds_title || \"undefined\";\nembeds_description = msg.embeds_description || \"undefined\";\nembeds_image = msg.embeds_image || \"undefined\";\nembeds_color = msg.embeds_color || \"undefined\";\nembeds_url = msg.embeds_url || \"undefined\";\nembeds_thumbnail = msg.embeds_thumbnail || \"undefined\";\nembeds_footer = msg.embeds_footer || \"undefined\";\n\nmsg.data = {};\nembeds_data = [];\n\nif (content != \"undefined\") {\n    msg.data.content = content;\n}    \nif (username == \"undefined\") {\n    msg.data.username = \"Node-RED\";\n}else{\n    msg.data.username = username;    \n}\nif (avatar_url == \"undefined\") {\n    msg.data.avatar_url = \"https://silanus.fr/sin/wp-content/uploads/2018/02/node-red-icon.png\";\n}else{\n    msg.data.avatar_url = avatar_url;    \n}\n\nif (embeds_url != \"undefined\" || embeds_title != \"undefined\" || embeds_description != \"undefined\" || embeds_thumbnail != \"undefined\" || embeds_image != \"undefined\" || embeds_footer != \"undefined\") {\n    message = {}\n    \n    if (embeds_author_name != \"undefined\" || embeds_author_icon_url != \"undefined\" || embeds_author_url != \"undefined\") {\n        message.author = {}\n        \n        if(embeds_author_name != \"undefined\") {\n            message.author.name = embeds_author_name;\n        }\n        if(embeds_author_url != \"undefined\") {\n            message.author.url = embeds_author_url;\n        }\n        if(embeds_author_icon_url != \"undefined\") {\n            message.author.icon_url = embeds_author_icon_url;\n        }    \n    }\n    \n    if(embeds_title != \"undefined\") {\n        message.title = msg.embeds_title;\n    }\n    if(embeds_description != \"undefined\") {\n        message.description = msg.embeds_description;\n    }\n    if(embeds_color != \"undefined\") {\n        message.color = parseInt(msg.embeds_color,16);\n    }    \n    if(embeds_url != \"undefined\") {\n        message.url = msg.embeds_url;\n    }    \n    if(embeds_thumbnail != \"undefined\") {\n        message.thumbnail = {};\n        message.thumbnail.url = msg.embeds_thumbnail;\n    }\n    if(embeds_image != \"undefined\") {\n        message.image = {};\n        message.image.url = msg.embeds_image;\n    }\n    if(embeds_footer != \"undefined\") {\n        message.footer = {};\n        message.footer.text = msg.embeds_footer;\n    }\n\n    embeds_data.push(message);\n    msg.data.embeds = embeds_data;\n}  \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "e2f8d2c29c3fac46"
            ]
        ]
    },
    {
        "id": "c88c9092e10df86e",
        "type": "http request",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Post Request",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2060,
        "y": 640,
        "wires": [
            [
                "acf60e8cbdbe191d"
            ]
        ]
    },
    {
        "id": "7e44abab9b51763f",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Format Query",
        "func": "msg.url = msg.webhook\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/json';\nmsg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 640,
        "wires": [
            [
                "c88c9092e10df86e"
            ]
        ]
    },
    {
        "id": "e2f8d2c29c3fac46",
        "type": "json",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Convert Data to String",
        "property": "data",
        "action": "",
        "pretty": false,
        "x": 1630,
        "y": 640,
        "wires": [
            [
                "7e44abab9b51763f"
            ]
        ]
    },
    {
        "id": "173d4f04beeb84da",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Get Configuration",
        "func": "dest = msg.dest ;\nconfig = global.get(\"notif.telegram.dest.\"+dest) || 'undefined'\n\nvar retour = [];\n\n// Message\nif (msg.message !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'message',\n      content: msg.message\n    }\n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload});\n\n// Image\nif (msg.image !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'photo',\n      content: msg.image\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n// Video\nif (msg.video !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'video',\n      content: msg.video\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n// Audio\nif (msg.audio !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'audio',\n      content: msg.audio\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n// Location\nif (msg.location !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'location',\n      content: msg.location\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n\n// Animation\nif (msg.animation !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'animation',\n      content: msg.animation\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n\n// Voice\nif (msg.voice !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'voice',\n      content: msg.voice\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n// Contact\nif (msg.contact !== \"\") {\n    payload = {\n      chatId: config,\n      type: 'contact',\n      content: msg.contact\n    }        \n}else{\n    payload = {\"chatId\": none};\n}\nretour.push({payload})\n\n\nreturn retour;",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 1100,
        "wires": [
            [
                "c0d566657388ab2a"
            ],
            [
                "ac83247143aaa79b"
            ],
            [
                "590e4c6573f9bc59"
            ],
            [
                "cb7876ea460b105a"
            ],
            [
                "a64d433f5b21f1b4"
            ],
            [
                "638c5b2ccb04b9cc"
            ],
            [
                "415c4f41a73be317"
            ],
            [
                "83209834b079ecd9"
            ]
        ]
    },
    {
        "id": "7fe19a6ebf669a7d",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Log",
        "func": "node.log(\"NOTIF / Telegram => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2090,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "c0d566657388ab2a",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Message ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1670,
        "y": 960,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "ac83247143aaa79b",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Image ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1660,
        "y": 1000,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "590e4c6573f9bc59",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Video ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1660,
        "y": 1040,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "cb7876ea460b105a",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Audio ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1660,
        "y": 1080,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "b266f27bb45bd72b",
        "type": "telegram sender",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "",
        "bot": "930eda8b.cf74a8",
        "outputs": 1,
        "x": 1930,
        "y": 1100,
        "wires": [
            [
                "7fe19a6ebf669a7d"
            ]
        ]
    },
    {
        "id": "415c4f41a73be317",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Voice ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1660,
        "y": 1200,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "a64d433f5b21f1b4",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Location ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1670,
        "y": 1120,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "638c5b2ccb04b9cc",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Animation ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1670,
        "y": 1160,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "83209834b079ecd9",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "ae87ffd25e9cd3b0",
        "name": "Contact ?",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1660,
        "y": 1240,
        "wires": [
            [
                "b266f27bb45bd72b"
            ]
        ]
    },
    {
        "id": "16322f181306e08e",
        "type": "link out",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Retry Discord",
        "links": [],
        "x": 2700,
        "y": 600,
        "wires": [],
        "l": true
    },
    {
        "id": "827db2d7a25f0a2d",
        "type": "link in",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "Retry Discord",
        "links": [],
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "7e44abab9b51763f"
            ]
        ],
        "l": true
    },
    {
        "id": "f047234e72f5e847",
        "type": "link out",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Retry Mattermost",
        "links": [],
        "x": 2710,
        "y": 780,
        "wires": [],
        "l": true
    },
    {
        "id": "336d65f4487fe26d",
        "type": "link in",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "Retry Mattermost",
        "links": [],
        "x": 1650,
        "y": 780,
        "wires": [
            [
                "66128b8eaf425a63"
            ]
        ],
        "l": true
    },
    {
        "id": "b6197462ef40847b",
        "type": "delay",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2520,
        "y": 600,
        "wires": [
            [
                "16322f181306e08e"
            ]
        ]
    },
    {
        "id": "9e69575b8c717131",
        "type": "delay",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2520,
        "y": 780,
        "wires": [
            [
                "f047234e72f5e847"
            ]
        ]
    },
    {
        "id": "acf60e8cbdbe191d",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "",
        "func": "if (msg.statusCode < 300 && msg.statusCode >= 200) {\n    msg.success = true;\n}else{\n    msg.success = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2240,
        "y": 640,
        "wires": [
            [
                "85a509fd6b70cb4e"
            ]
        ]
    },
    {
        "id": "85a509fd6b70cb4e",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "03114f258232250f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2370,
        "y": 640,
        "wires": [
            [
                "b6197462ef40847b"
            ],
            [
                "5c920f3750f2b506"
            ]
        ]
    },
    {
        "id": "203c03dbc7a29204",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "",
        "func": "if (msg.statusCode < 300 && msg.statusCode >= 200) {\n    msg.success = true;\n}else{\n    msg.success = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2240,
        "y": 820,
        "wires": [
            [
                "b7f0b182222f387c"
            ]
        ]
    },
    {
        "id": "b7f0b182222f387c",
        "type": "switch",
        "z": "d37c0d33d99013c6",
        "g": "6e8c58c7b970fef2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2370,
        "y": 820,
        "wires": [
            [
                "9e69575b8c717131"
            ],
            [
                "be48507a4c85f8c8"
            ]
        ]
    },
    {
        "id": "e62922d05357197a",
        "type": "http request",
        "z": "d37c0d33d99013c6",
        "g": "3f12f7dfcb5c7f40",
        "name": "SMS via HTTP",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1620,
        "y": 1350,
        "wires": [
            [
                "f17f05154119affb"
            ]
        ]
    },
    {
        "id": "f17f05154119affb",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "3f12f7dfcb5c7f40",
        "name": "Log",
        "func": "node.log(\"NOTIF / SMS => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1770,
        "y": 1350,
        "wires": [
            []
        ]
    },
    {
        "id": "d3901c18ac0bf9b8",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "3f12f7dfcb5c7f40",
        "name": "Get Configuration",
        "func": "var dest = msg.dest ;\nvar sms_url = global.get('notif.sms.url');\nvar sms_number = global.get(\"notif.sms.dest.\"+dest) || 'undefined'\nvar message = encodeURIComponent(msg.message);\n\nmsg.method = \"POST\"\nmsg.url = sms_url.replace(\"##SMSNUMBER##\",sms_number).replace(\"##MESSAGE##\",message)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 1350,
        "wires": [
            [
                "e62922d05357197a"
            ]
        ]
    },
    {
        "id": "b786f8be85ca161f",
        "type": "http request",
        "z": "d37c0d33d99013c6",
        "g": "b320a76202a15be4",
        "name": "awtrix notify",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1610,
        "y": 1460,
        "wires": [
            [
                "849f6c694d844931"
            ]
        ]
    },
    {
        "id": "849f6c694d844931",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "b320a76202a15be4",
        "name": "Log",
        "func": "node.log(\"NOTIF / Awtrix => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1770,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "86851be5233ceb32",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "b320a76202a15be4",
        "name": "Get Configuration",
        "func": "var dest = msg.dest;\nvar message = msg.message;\nvar awtrix_host = global.get(\"notif.awtrix.dest.\" + dest) || 'undefined'\n\nmsg.method = \"POST\"\nmsg.url = \"http://\" + awtrix_host + \"/api/v3/notify\"\n\nmsg.payload = {\n \"name\": \"NodeRedNotification\",\n \"icon\": 225,\n \"moveIcon\": true,\n \"lifetime\": 999999,\n \"text\": message,\n \"repeat\": 2,\n \"color\": [0, 255, 0]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 1460,
        "wires": [
            [
                "b786f8be85ca161f"
            ]
        ]
    },
    {
        "id": "732d064b166d2f05",
        "type": "http in",
        "z": "d37c0d33d99013c6",
        "name": "",
        "url": "/notif",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 700,
        "y": 680,
        "wires": [
            [
                "cd3a6050bcdf6345",
                "74496153dba3fa18"
            ]
        ]
    },
    {
        "id": "cd3a6050bcdf6345",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "name": "",
        "func": "msg = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 680,
        "wires": [
            [
                "b45bfdf42c36c673"
            ]
        ]
    },
    {
        "id": "ce3cc9d175269965",
        "type": "http response",
        "z": "d37c0d33d99013c6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 730,
        "wires": []
    },
    {
        "id": "74496153dba3fa18",
        "type": "change",
        "z": "d37c0d33d99013c6",
        "name": "Return",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"return\":true}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 730,
        "wires": [
            [
                "ce3cc9d175269965"
            ]
        ]
    },
    {
        "id": "c209b185326fa55d",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "5997e3e14331eedd",
        "name": "Get configuration",
        "func": "var dest = msg.dest;\nmsg.url = global.get('notif.callmebot.dest.' + dest) || 'undefined';\n\nmsg.url += '&text=' + encodeURIComponent(msg.message);\n\nif (dest.startsWith('callmebot_telegramvoice_') && msg.repeat) {\n    msg.url += '&rpt=' + msg.repeat;\n}\nif (dest.startsWith('callmebot_messenger_') && msg.image) {\n    msg.url += '&image=' + msg.image;\n}\n\nmsg.method = 'GET';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1580,
        "wires": [
            [
                "c84070fdde40580e"
            ]
        ]
    },
    {
        "id": "c84070fdde40580e",
        "type": "http request",
        "z": "d37c0d33d99013c6",
        "g": "5997e3e14331eedd",
        "name": "CallmeBot HTTP",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1650,
        "y": 1580,
        "wires": [
            [
                "4b869e8725b611ba"
            ]
        ]
    },
    {
        "id": "4b869e8725b611ba",
        "type": "function",
        "z": "d37c0d33d99013c6",
        "g": "5997e3e14331eedd",
        "name": "Log",
        "func": "node.log(\"NOTIF / Awtrix => OK\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1830,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "7f33d7bb.9361a8",
        "type": "server",
        "name": "Home Assistant",
        "version": 1,
        "legacy": false,
        "addon": false,
        "rejectUnauthorizedCerts": false,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "credentials": {}
    },
    {
        "id": "930eda8b.cf74a8",
        "type": "telegram bot",
        "botname": "Node-RED",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "1000",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false,
        "credentials": {}
    }
]
